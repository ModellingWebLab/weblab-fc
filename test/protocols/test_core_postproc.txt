# Compact version of the test_core_postproc protocol

inputs {
    example_input = 0
}

import "BasicLibrary.txt"

post-processing {
    def sum(a, dim=default) {
        return fold(@2:+, a, 0, dim)
    }
    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)

    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    input_sum = sum(input)
    assert input_sum[0] == 55
    input2d = [ [1,3,5], [6,4,2] ]
    input2d_max = max(input2d, 0)
    assert ArrayEq(input2d_max, [[6,4,5]])
    input2d_slice = input2d[1$1:2] # [*$:] added implicitly
    assert ArrayEq(input2d_slice, [[3], [4]])
    input2 = [ 1, 2, 3 ]
    map_result = map(@2:+, input2d_max[0][:], input2)
    assert ArrayEq(map_result, [7, 6, 8])
    
    adder = lambda input: map(@2:+, input, input2)
    double_input2 = adder(input2)
    assert ArrayEq(double_input2, [2, 4, 6])
    
    # Testing if
    assert (if 1 then 2 else 3) == 2
    assert (if 0 then 2 else 3) == 3
    
    # Testing array comprehensions (and more accessors)
    
    counting1d = [ i for 0$i in 0:10 ]
    assert counting1d.NUM_DIMS == 1
    assert counting1d.SHAPE[0] == 10
    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])
    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number
    
    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]
    assert counting2d.NUM_DIMS == 2
    assert counting2d.NUM_ELEMENTS == 6
    assert counting2d.SHAPE[0] == 2
    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])
    
    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]
    assert ArrayEq(counting2d, counting2d_alt)
    
    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]
    assert blocks.NUM_DIMS == 3
    assert blocks.NUM_ELEMENTS == 8
    assert blocks.SHAPE[0] == 2
    assert blocks.SHAPE[1] == 2
    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])
    
    # Test reversing an array
    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])
    
    # Test more complex negative step views
    # Note this is Python semantics of half-open range: the begin element is included, the end element not.
    assert ArrayEq(input[:-1:-3], [10, 9])
    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])
    assert ArrayEq(input[4:-1:2], [5, 4])
    assert ArrayEq(input[2:-2:0], [3])
    assert ArrayEq(input[2:-2:-11], [3, 1])
    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])
    
    # Test function returning multiple values
    swap = lambda a, b { return b, a }
    one, two = swap(2, 1)
    assert swap.IS_FUNCTION
    assert one == 1
    assert two == 2
    
    # Test nested functions and scoping
    nested_scopes = lambda {
        # Nested function
        nested_fn = lambda input: input + outer_var
        # Variable that should be accessible
        outer_var = 1
        # Call nested function & check result
        assert nested_fn(1) == 2
    }
    
    # Test Count function
    assert Count(input, lambda elt: elt < 5) == 4
    assert Count([1,2,3,4], lambda e: e > 2) == 2
    assert Count([[1,2,3],[4,5,6],[7,8,9]], lambda e: MathML:rem(e,2)==1) == 5

    # Simple test of Filter function
    assert ArrayEq(Filter(input, lambda elt: elt < 5), [1,2,3,4])

    # More tests of functions from the basic library

    assert ArrayEq(Join([1,2,3], [4,5,6]), [1,2,3,4,5,6])
    assert ArrayEq(Join([[1,2,3],[4,5,6]], [[7,8,9]], 0), [[1,2,3], [4,5,6], [7,8,9]])
    assert ArrayEq(Join([[1,2,3],[4,5,6]], [[7],[8]], 1), [[1,2,3,7], [4,5,6,8]])

    assert ArrayEq(Stretch([[1], [2], [3]], 3, 1), [[1,1,1], [2,2,2], [3,3,3]])
    assert ArrayEq(Stretch([[1,2]], [3,2], 0), [[1,2], [1,2], [1,2]])

    assert ArrayEq(Shift([1,2,3,4,5,6], 2), [1,1,1,2,3,4])
    assert ArrayEq(Shift([1,2,3,4,5,6], -2), [3,4,5,6,6,6])
    assert ArrayEq(Shift([[1,2,3], [4,5,6], [7,8,9]], 1, 0), [[1,2,3], [1,2,3], [4,5,6]])
    assert ArrayEq(Shift([[1,2,3], [4,5,6], [7,8,9]], -1), [[2,3,3], [5,6,6], [8,9,9]])

    assert ArrayEq(Window([1,2,3,4,5], 1), [ [2,3,4,5,5], [1,2,3,4,5], [1,1,2,3,4] ])

    def Close(a1, a2, tol=1e-6): MultiFold(@2:&&, map(lambda x1, x2: MathML:abs(x1-x2)<tol, a1, a2), 1)
    assert Close(Localise(Mean, [1,2,3,4,5,6], 1), [4/3,2,3,4,5,17/3])
    assert ArrayEq(Localise(Product, [[1,2,3],[4,5,6],[7,8,9]], 1, 0), [[4,20,54],[28,80,162], [196,320,486]])
    assert ArrayEq(Localise(Product, [[1,2,3],[4,5,6],[7,8,9]], 1, 1), [[2,6,18], [80,120,180],[392,504,648]])

    assert Close(Interp([1,2,3,4], [2,4,6,8], [5], [1], 1), [2.5])
    assert Close(Interp([1,2,3,4], [2,4,6,8], [6], [1], 1), [3])
    assert Close(Interp([1,2,3,4], [2,4,6,8], [5], [3], 0), [2.5])
    assert Close(Interp([1,2,3,4], [7,6,5,4], [6.8], [1], 1), [1.2])
    assert Close(Interp([[1,2,3,4],[5,6,7,8],[9,10,11,12]],   # xs
                        [[2,4,6,8],[8,6,4,2],[6,8,5,2]],      # ys
                        [[5],[7],[4]], [[2],[5],[10]], 1, 1), # targets, starts, afterStarts, dim
                 [[2.5], [5.5], [11 + 1/3]])

    assert ArrayEq(After([2,4,6,8], [1,2,3,4], 2), [6,8])
    assert ArrayEq(After([[1,2,3],[4,5,6],[7,8,9]], [[1,1,1],[2,2,2],[3,3,3]], 1, 0), [[4,5,6],[7,8,9]])

    assert ArrayEq(AddDim([1,2,3], 0), [[1,2,3]])
    assert ArrayEq(AddDim([1,2,3], 1), [[1],[2],[3]])

    assert ArrayEq(Transpose([[1,2,3],[4,5,6]]), [[1,4],[2,5],[3,6]])
    assert ArrayEq(Transpose([[1,4],[2,5],[3,6]]), [[1,2,3],[4,5,6]])

    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])
    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])
    assert ArrayEq(Permute(input2d, [1,0], 0), [[6,4,2], [1,3,5]])

    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])
    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])
    assert ArrayEq(Sort(input), input)

    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])
    assert ArrayEq(SortBy(input2d, [7,2], 0), [[6,4,2], [1,3,5]])

    assert ArrayEq(MakeArray(1, [2]), [1,1])
    assert ArrayEq(MakeArray(1, [2, 3]), [ [1,1,1], [1,1,1] ])
    assert ArrayEq(MakeArray(1, [1, 2, 3]), [[ [1,1,1], [1,1,1] ]])
    assert ArrayEq(MakeArray([1,2], [3]), [ [1,2], [1,2], [1,2] ])
}
