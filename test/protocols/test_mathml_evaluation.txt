documentation {
Test the behaviour of each MathML element in a fake model created by this protocol.

The model interface defines at least one output per supported MathML element,
using tags in a local namespace. The simulation task then varies the input to these
over the full IEEE double precision range, to give a sense of how implementations
compare in their handling of different model mathematics.

As well as single operations, we also have some equations that look at optimisable
combinations, such as expm1 and log1p.
}

namespace oxmeta = "https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#"
namespace local = "urn:fc:local#"

import std = "BasicLibrary.txt"

units {
    # Define an alias to save typing below
    ms = milli second
}

model interface {
    output oxmeta:time units ms  # Avoid bug?
    input local:input units dimensionless = 0

    # Basic arithmetic

    output local:plus units dimensionless
    define local:plus = local:input + local:input
    output local:minus units dimensionless
    define local:minus = local:input - 10.01 :: dimensionless
    output local:uminus units dimensionless
    define local:uminus = -local:input
    output local:times units dimensionless
    define local:times = local:input * local:input
    output local:divide units dimensionless
    define local:divide = local:input / 10.01 :: dimensionless

    # Roots & power
    output local:root units dimensionless
    define local:root = MathML:root(local:input)
    output local:power_half units dimensionless
    define local:power_half = MathML:power(local:input, 0.5 :: dimensionless)
    output local:power2 units dimensionless
    define local:power2 = MathML:power(local:input, 2 :: dimensionless)
    output local:power3 units dimensionless
    define local:power3 = MathML:power(local:input, 3 :: dimensionless)
    output local:power4 units dimensionless
    define local:power4 = MathML:power(local:input, 4 :: dimensionless)

    # Exponentials & logs
    output local:exp units dimensionless
    define local:exp = MathML:exp(local:input)
    output local:expm1 units dimensionless
    define local:expm1 = MathML:exp(local:input) - 1 :: dimensionless
    output local:ln units dimensionless
    define local:ln = MathML:ln(local:input)
    output local:log units dimensionless
    define local:log = MathML:log(local:input)
    output local:log1p units dimensionless
    define local:log1p = 1 :: dimensionless + MathML:ln(local:input)

    # Floor & ceiling
    output local:abs units dimensionless
    define local:abs = MathML:abs(local:input)
    output local:floor units dimensionless
    define local:floor = MathML:floor(local:input)
    output local:ceiling units dimensionless
    define local:ceiling = MathML:ceiling(local:input)

    # Trig
    output local:sin units dimensionless
    define local:sin = MathML:sin(local:input)
    output local:cos units dimensionless
    define local:cos = MathML:cos(local:input)
    output local:tan units dimensionless
    define local:tan = MathML:tan(local:input)

    output local:sec units dimensionless
    define local:sec = MathML:sec(local:input)
    output local:csc units dimensionless
    define local:csc = MathML:csc(local:input)
    output local:cot units dimensionless
    define local:cot = MathML:cot(local:input)

    output local:sinh units dimensionless
    define local:sinh = MathML:sinh(local:input)
    output local:cosh units dimensionless
    define local:cosh = MathML:cosh(local:input)
    output local:tanh units dimensionless
    define local:tanh = MathML:tanh(local:input)

    output local:sech units dimensionless
    define local:sech = MathML:sech(local:input)
    output local:csch units dimensionless
    define local:csch = MathML:csch(local:input)
    output local:coth units dimensionless
    define local:coth = MathML:coth(local:input)

    output local:arcsin units dimensionless
    define local:arcsin = MathML:arcsin(local:input)
    output local:arccos units dimensionless
    define local:arccos = MathML:arccos(local:input)
    output local:arctan units dimensionless
    define local:arctan = MathML:arctan(local:input)

    output local:arcsec units dimensionless
    define local:arcsec = MathML:arcsec(local:input)
    output local:arccsc units dimensionless
    define local:arccsc = MathML:arccsc(local:input)
    output local:arccot units dimensionless
    define local:arccot = MathML:arccot(local:input)

    output local:arcsinh units dimensionless
    define local:arcsinh = MathML:arcsinh(local:input)
    output local:arccosh units dimensionless
    define local:arccosh = MathML:arccosh(local:input)
    output local:arctanh units dimensionless
    define local:arctanh = MathML:arctanh(local:input)

    output local:arcsech units dimensionless
    define local:arcsech = MathML:arcsech(local:input)
    output local:arccsch units dimensionless
    define local:arccsch = MathML:arccsch(local:input)
    output local:arccoth units dimensionless
    define local:arccoth = MathML:arccoth(local:input)
}

tasks {
    simulation pos = timecourse {
        range i units dimensionless uniform -300:25:300
        modifiers {
            at each loop set local:input = 1.23456789 * MathML:power(10, i)
        }
    }
    simulation neg = timecourse {
        range i units dimensionless uniform -300:25:300
        modifiers {
            at each loop set local:input = -1.23456789 * MathML:power(10, i)
        }
    }
}

post-processing {
    combined_pos = [
        pos:plus, pos:minus, pos:uminus, pos:times, pos:divide,
        pos:root, pos:power_half, pos:power2, pos:power3, pos:power4,
        pos:exp, pos:expm1, pos:ln, pos:log, pos:log1p,
        pos:abs, pos:floor, pos:ceiling,
        pos:sin, pos:cos, pos:tan,
        pos:sec, pos:csc, pos:cot,
        pos:sinh, pos:cosh, pos:tanh,
        pos:sech, pos:csch, pos:coth,
        pos:arcsin, pos:arccos, pos:arctan,
        pos:arcsec, pos:arccsc, pos:arccot,
        pos:arcsinh, pos:arccosh, pos:arctanh,
        pos:arcsech, pos:arccsch, pos:arccoth
    ]
    combined_neg = [
        neg:plus, neg:minus, neg:uminus, neg:times, neg:divide,
        neg:root, neg:power_half, neg:power2, neg:power3, neg:power4,
        neg:exp, neg:expm1, neg:ln, neg:log, neg:log1p,
        neg:abs, neg:floor, neg:ceiling,
        neg:sin, neg:cos, neg:tan,
        neg:sec, neg:csc, neg:cot,
        neg:sinh, neg:cosh, neg:tanh,
        neg:sech, neg:csch, neg:coth,
        neg:arcsin, neg:arccos, neg:arctan,
        neg:arcsec, neg:arccsc, neg:arccot,
        neg:arcsinh, neg:arccosh, neg:arctanh,
        neg:arcsech, neg:arccsch, neg:arccoth
    ]

    # Calculating relative error
    rel_err_fn = lambda ref, act: if ref == 0 then MathML:abs(act)
        else if ref != ref then 0
        else MathML:abs((act-ref)/ref)

    # Check against reference data
    ref_pos = load("../output/mathml_evaluation/outputs_combined_pos.csv")
    ref_neg = load("../output/mathml_evaluation/outputs_combined_neg.csv")
    err_pos = map(lambda a, b: MathML:abs(a-b), ref_pos, combined_pos)
    err_neg = map(lambda a, b: MathML:abs(a-b), ref_neg, combined_neg)
    rel_err_pos = map(rel_err_fn, ref_pos, combined_pos)
    rel_err_neg = map(rel_err_fn, ref_neg, combined_neg)
    max_rel_err_pos = std:Max(std:Max(rel_err_pos)[0])[0]
    max_rel_err_neg = std:Max(std:Max(rel_err_neg)[0])[0]
    assert max_rel_err_pos < 1e-6
    assert max_rel_err_neg < 1e-6
}

outputs {
    ref_pos units dimensionless "Reference outputs for positive inputs"
    ref_neg units dimensionless "Reference outputs for negative inputs"
    combined_pos units dimensionless "All outputs for positive inputs"
    combined_neg units dimensionless "All outputs for negative inputs"
    err_pos units dimensionless "Absolute error for positive inputs"
    err_neg units dimensionless "Absolute error for negative inputs"
    rel_err_pos units dimensionless "Relative error for positive inputs"
    rel_err_neg units dimensionless "Relative error for negative inputs"
    max_rel_err_pos units dimensionless "Max rel error for positive inputs"
    max_rel_err_neg units dimensionless "Max rel error for negative inputs"

    pos_plus = pos:plus
    pos_minus = pos:minus
    pos_uminus = pos:uminus
    pos_times = pos:times
    pos_divide = pos:divide
    pos_root = pos:root
    pos_power_half = pos:power_half
    pos_power2 = pos:power2
    pos_power3 = pos:power3
    pos_power4 = pos:power4
    pos_exp = pos:exp
    pos_expm1 = pos:expm1
    pos_ln = pos:ln
    pos_log = pos:log
    pos_log1p = pos:log1p
    pos_abs = pos:abs
    pos_floor = pos:floor
    pos_ceiling = pos:ceiling
    pos_sin = pos:sin
    pos_cos = pos:cos
    pos_tan = pos:tan
    pos_sec = pos:sec
    pos_csc = pos:csc
    pos_cot = pos:cot
    pos_sinh = pos:sinh
    pos_cosh = pos:cosh
    pos_tanh = pos:tanh
    pos_sech = pos:sech
    pos_csch = pos:csch
    pos_coth = pos:coth
    pos_arcsin = pos:arcsin
    pos_arccos = pos:arccos
    pos_arctan = pos:arctan
    pos_arcsec = pos:arcsec
    pos_arccsc = pos:arccsc
    pos_arccot = pos:arccot
    pos_arcsinh = pos:arcsinh
    pos_arccosh = pos:arccosh
    pos_arctanh = pos:arctanh
    pos_arcsech = pos:arcsech
    pos_arccsch = pos:arccsch
    pos_arccoth = pos:arccoth

    neg_plus = neg:plus
    neg_minus = neg:minus
    neg_uminus = neg:uminus
    neg_times = neg:times
    neg_divide = neg:divide
    neg_root = neg:root
    neg_power_half = neg:power_half
    neg_power2 = neg:power2
    neg_power3 = neg:power3
    neg_power4 = neg:power4
    neg_exp = neg:exp
    neg_expm1 = neg:expm1
    neg_ln = neg:ln
    neg_log = neg:log
    neg_log1p = neg:log1p
    neg_abs = neg:abs
    neg_floor = neg:floor
    neg_ceiling = neg:ceiling
    neg_sin = neg:sin
    neg_cos = neg:cos
    neg_tan = neg:tan
    neg_sec = neg:sec
    neg_csc = neg:csc
    neg_cot = neg:cot
    neg_sinh = neg:sinh
    neg_cosh = neg:cosh
    neg_tanh = neg:tanh
    neg_sech = neg:sech
    neg_csch = neg:csch
    neg_coth = neg:coth
    neg_arcsin = neg:arcsin
    neg_arccos = neg:arccos
    neg_arctan = neg:arctan
    neg_arcsec = neg:arcsec
    neg_arccsc = neg:arccsc
    neg_arccot = neg:arccot
    neg_arcsinh = neg:arcsinh
    neg_arccosh = neg:arccosh
    neg_arctanh = neg:arctanh
    neg_arcsech = neg:arcsech
    neg_arccsch = neg:arccsch
    neg_arccoth = neg:arccoth
}
