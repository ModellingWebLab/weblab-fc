<?xml version="1.0"?>
<?xml-model href="../../src/proto/parsing/protocol.rnc" type="application/relax-ng-compact-syntax"?>
<protocol xmlns="https://chaste.cs.ox.ac.uk/nss/protocol/0.1#">
    <post-processing>
        <apply xmlns="http://www.w3.org/1998/Math/MathML">
            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList"/>
            <!-- Create 3x5 input array: input[i][j] = i*5 + j -->
            <apply><eq/>
                <ci>input</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
                    <domainofapplication>
                        <apply>
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                            <cn>0</cn> <!-- dim -->
                            <cn>0</cn> <!-- start -->
                            <cn>1</cn> <!-- stride -->
                            <cn>3</cn> <!-- end -->
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string">i</csymbol> <!-- var name -->
                        </apply>
                        <apply>
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                            <cn>1</cn> <!-- dim -->
                            <cn>0</cn> <!-- start -->
                            <cn>1</cn> <!-- stride -->
                            <cn>5</cn> <!-- end -->
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string">j</csymbol> <!-- var name -->
                        </apply>
                    </domainofapplication>
                    <apply><plus/>
                        <apply><times/>
                            <ci>i</ci>
                            <cn>5</cn>
                        </apply>
                        <ci>j</ci>
                    </apply>
                </apply>
            </apply>
            <apply><eq/>
                <ci>input_max</ci>
                <cn>14</cn>
            </apply>
            
            <!-- All but one entry -->
            <!-- all_bar_largest = map(lambda x: x<input_max, input) -->
            <apply><eq/>
                <ci>all_bar_largest</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/map"/>
                    <lambda>
                        <bvar><ci>x</ci></bvar>
                        <apply><lt/>
                            <ci>x</ci>
                            <ci>input_max</ci>
                        </apply>
                    </lambda>
                    <ci>input</ci>
                </apply>
            </apply>
            <!-- all_bar_largest_idxs = find(all_bar_largest) -->
            <apply><eq/>
                <ci>all_bar_largest_idxs</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/find"/>
                    <ci>all_bar_largest</ci>
                </apply>
            </apply>
            <!-- all_bar_largest_indexed = index(input, all_bar_largest_idxs, 0, default, 1, -1) -->
            <apply><eq/>
                <ci>all_bar_largest_indexed</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/index"/>
                    <ci>input</ci>
                    <ci>all_bar_largest_idxs</ci>
                    <cn>0</cn>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                    <cn>1</cn>
                    <cn>-1</cn>
                </apply>
            </apply>
            
            <!-- Recursive function to fold along every dimension in turn, starting from zero -->
            <apply><eq/>
                <ci>multi_fold</ci>
                <lambda>
                    <bvar><ci>op</ci></bvar>
                    <bvar><ci>array</ci></bvar>
                    <bvar><ci>init</ci></bvar>
                    <piecewise>
                        <piece>
                            <!-- Base case: 0d input - return the single value -->
                            <ci>array</ci>
                            <apply><eq/>
                                <apply>
                                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor">NUM_DIMS</csymbol>
                                    <ci>array</ci>
                                </apply>
                                <cn>0</cn>
                            </apply>
                        </piece>
                        <otherwise>
                            <!-- Recursive case: fold zeroth dimension -->
                            <apply>
                                <ci>multi_fold</ci>
                                <ci>op</ci>
                                <apply>
                                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view"/>
                                    <apply>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/fold"/>
                                        <ci>op</ci>
                                        <ci>array</ci>
                                        <ci>init</ci>
                                        <cn>0</cn>
                                    </apply>
                                    <apply>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                                        <cn>0</cn> <!-- dim -->
                                        <cn>0</cn> <!-- start -->
                                        <cn>0</cn> <!-- stride -->
                                        <cn>0</cn> <!-- end -->
                                    </apply>
                                    <apply>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                                        <cn>1</cn>
                                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                                    </apply>
                                </apply>
                                <ci>init</ci>
                            </apply>                            
                        </otherwise>
                    </piecewise>
                </lambda>
            </apply>
            
            <!-- Function to check array equality elementwise: multi_fold(and, map(eq, a1, a2), true) -->
            <apply><eq/>
                <ci>array_eq</ci>
                <lambda>
                    <bvar><ci>a1</ci></bvar>
                    <bvar><ci>a2</ci></bvar>
                    <apply>
                        <ci>multi_fold</ci>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2">and</csymbol>
                        <apply>
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/map"/>
                            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2">eq</csymbol>
                            <ci>a1</ci>
                            <ci>a2</ci>
                        </apply>
                        <cn>1</cn>
                    </apply>
                </lambda>
            </apply>
            
            <!-- Whole array -->
            <!-- all_entries = map(lambda x: x<input_max+1, input) -->
            <apply><eq/>
                <ci>all_entries</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/map"/>
                    <lambda>
                        <bvar><ci>x</ci></bvar>
                        <apply><lt/>
                            <ci>x</ci>
                            <apply><plus/>
                                <ci>input_max</ci>
                                <cn>1</cn>
                            </apply>
                        </apply>
                    </lambda>
                    <ci>input</ci>
                </apply>
            </apply>
            <!-- all_entries_idxs = find(all_entries) -->
            <apply><eq/>
                <ci>all_entries_idxs</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/find"/>
                    <ci>all_entries</ci>
                </apply>
            </apply>
            <!-- all_entries_indexed = index() -->
            <apply><eq/>
                <ci>all_entries_indexed</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/index"/>
                    <ci>input</ci>
                    <ci>all_entries_idxs</ci>
                    <cn>0</cn>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                </apply>
            </apply>
            <!-- assert(all_entries_indexed == input) -->
            <apply>
                <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert"/>
                <apply>
                    <ci>array_eq</ci>
                    <ci>input</ci>
                    <ci>all_entries_indexed</ci>
                </apply>
            </apply>
        </apply>
    </post-processing>
</protocol>
