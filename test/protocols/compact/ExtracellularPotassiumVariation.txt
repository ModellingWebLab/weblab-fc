# Run a cell model until it reaches steady state, with IKr block levels

documentation {
# Extracellular potassium concentration variation protocol

This protocol implements steady pacing for cardiac electrophysiology cell models, and produces
the action potential and resting potential at this steady state, for varying concentrations of extracellular potassium.
Also known as hypokaelemic (low extracellular potassium) and hyperkaelemic (high extracellular potassium) conditions.

##Parameters:

* **extra\_potassium\_test\_concentrations**  The concentrations to apply (in addition to model default) - defaults to [2:10] mM.
* **pacing\_period**  The pacing period in milliseconds (1000/frequency in Hz).
* **max\_paces**  The maximum number of paces to stimulate the system with (some models never get to steady state!).

It requires models to provide variables with the annotations:

* **oxmeta:membrane\_stimulus\_current**
* **oxmeta:membrane\_voltage**
* **oxmeta:extracellular\_potassium\_concentration**
* **oxmeta:time**
}

namespace oxmeta = "https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#"

inputs {
    extra_potassium_test_concentrations = [i for i in 2:1:11] # milliMolar
    pacing_period = 1000  # ms
    num_inner_paces = 1   # How many paces to run between comparing state variables
    max_paces = 10000     # Give up at this point
    norm_threshold = 1e-6 # Applied to p1 norm of state variable differences
}

import std = "BasicLibrary.txt"
import cardiac = "CardiacLibrary.txt"

library {
    default_K_o = sim:oxmeta:extracellular_potassium_concentration
    potassium_test_concentrations = std:Sort(std:Join(std:AddDim(default_K_o, 0), extra_potassium_test_concentrations))
}

units {
    percent = dimensionless "%"
}

model interface {
    input oxmeta:extracellular_potassium_concentration
}

tasks {
    simulation sim = nested {
        range Ko_concentrations units milliMolar vector potassium_test_concentrations
        modifiers {
            # There's nothing to reset here! 
            # But this tells it this nesting could be parallelised.
            at each loop reset
            # Set the scaling factor
            at each loop set oxmeta:extracellular_potassium_concentration = Ko_concentrations
        }
        # Get the model to steady-state (if possible)
        nests protocol "SteadyStateRunner.txt" {
            num_inner_paces = num_inner_paces
            pacing_period = pacing_period
            max_paces = max_paces
            norm_threshold = norm_threshold
            select output detailed_time
            select output detailed_voltage
        }
    }
}

post-processing {  
    APD90 = cardiac:Apd(sim:detailed_voltage, sim:detailed_time)[1$0]
    RestingPotential = std:Min(sim:detailed_voltage)[1$0]
    
    # We want to see the change relative to control APD90, this gives you the index one too big!
    control_index = find(map(lambda t: t > default_K_o, potassium_test_concentrations))[0][0]
    
    control_APD90 = APD90[0$control_index-1]
    scaled_APD90 = map(lambda x: 100*x/control_APD90[0], APD90)
    
    # And also resting potential relative to control
    control_resting_potential = RestingPotential[0$control_index-1]
    scaled_resting_potential = map(lambda x: -100*x/control_resting_potential[0], RestingPotential)
}

outputs {
    potassium_test_concentrations units mM "Extracellular [K+]"
    APD90 units ms "APD90"
    RestingPotential units mV "Resting potential"
    scaled_APD90 units percent "APD90"
    scaled_resting_potential units percent "Resting potential"
    control_index units dimensionless
    
    detailed_time    = sim:detailed_time    "Time"
    detailed_voltage = sim:detailed_voltage "Transmembrane potential"
}

plots {
    plot "Relative APD90" using linespoints { scaled_APD90 against potassium_test_concentrations} 
    plot "Final pace voltage" using lines { detailed_voltage against detailed_time key potassium_test_concentrations}
    plot "APD90" using linespoints { APD90 against potassium_test_concentrations }
    plot "Resting potential" using linespoints { RestingPotential against potassium_test_concentrations }
    plot "Relative resting potential" using linespoints { scaled_resting_potential against potassium_test_concentrations }
}
