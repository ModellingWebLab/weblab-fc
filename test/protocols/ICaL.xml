<?xml version="1.0"?>
<?xml-model href="../../src/proto/parsing/protocol.rnc" type="application/relax-ng-compact-syntax"?>
<protocol xmlns="https://chaste.cs.ox.ac.uk/nss/protocol/0.1#">
    <!-- Declare protocol inputs with default values -->
    <inputs>
        <apply xmlns="http://www.w3.org/1998/Math/MathML">
            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList"/>
            <apply><eq/>
                <ci>holding_potential</ci>
                <cn>-50.0</cn>
            </apply>
            <!-- How long to simulate for to get to steady state at the holding potential -->
            <apply><eq/>
                <ci>steady_state_time</ci>
                <cn>10000</cn>
            </apply>
        </apply>
    </inputs>
    
    <modelModification><![CDATA[
p = protocol.Protocol(doc.model, multi_stage=True)
LCC = doc.model.get_variable_by_oxmeta_name('membrane_L_type_calcium_current')
t = doc.model.get_variable_by_oxmeta_name('time')
V = doc.model.get_variable_by_oxmeta_name('membrane_voltage')
Cao = doc.model.get_variable_by_oxmeta_name('extracellular_calcium_concentration')
try:
    Cm = doc.model.get_variable_by_oxmeta_name('membrane_capacitance')
except:
    Cm = None

# Units
new_units = protocol.cellml_units.create_new
current_units = new_units(doc.model, 'proto_uA_per_cm2',
                          [{'units': 'ampere', 'prefix': 'micro'},
                           {'units': 'metre', 'prefix': 'centi', 'exponent': '-2'}])
uF_per_cm2 = new_units(doc.model, 'proto_uF_per_cm2',
                       [{'units': 'farad', 'prefix': 'micro'},
                        {'units': 'metre', 'prefix': 'centi', 'exponent': '-2'}])
microamps = new_units(doc.model, u'microamps',
                      [{'units':'ampere', 'prefix':'micro'}])
A_per_F = new_units(doc.model, 'A_per_F',
                    [{'units': 'ampere'},
                     {'units': 'farad', 'exponent': '-1'}])

# Define special units conversion for LCC
chaste_cm = protocol.cellml_variable.create_new(doc.model, u'chaste_membrane_capacitance',
                                                uF_per_cm2.name, initial_value=u'1')
converter = p.get_units_converter()
converter.add_special_conversion(A_per_F, current_units,
                                 lambda expr: converter.times_rhs_by(expr, chaste_cm))
converter.add_special_conversion(current_units, A_per_F,
                                 lambda expr: converter.divide_rhs_by(expr, chaste_cm))
if Cm:
    converter.add_special_conversion(microamps, current_units,
            lambda expr: converter.times_rhs_by(converter.divide_rhs_by(expr, Cm), chaste_cm))
    converter.add_special_conversion(current_units, microamps,
            lambda expr: converter.divide_rhs_by(converter.times_rhs_by(expr, Cm), chaste_cm))

# LCC in desired units for comparison
LCC = p.specify_as_output(LCC, current_units)

# V and Cao should become modifiable parameters
V = p.specify_as_input(V, V.get_units())
Cao = p.specify_as_input(Cao, Cao.get_units())

# Now a hack to stop translation complaining about missing currents
i_stim = doc.model.get_variable_by_oxmeta_name('membrane_stimulus_current')
i_stim_defn = protocol.mathml_apply.create_new(doc, u'eq', [i_stim.component.name + u',' + i_stim.name,
                                                            (u'0', LCC.units)])
doc._cml_config.options.use_i_ionic_regexp = True
doc._cml_config.i_ionic_definitions = [doc._cml_config._create_var_def(LCC.component.name + u',' + LCC.name, u'name')]

# Quick fix to get t units-converted
doc._cml_config.options.convert_interfaces = True

p.outputs.update([V, t, Cao, LCC, i_stim])
p.inputs.update([i_stim_defn, chaste_cm, uF_per_cm2])
p.modify_model()
]]></modelModification>
    
    <library>
        <apply xmlns="http://www.w3.org/1998/Math/MathML">
            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList"/>
            <apply><eq/>
                <ci>default_Cao</ci>
                <ci>extracellular_calcium_concentration</ci>
            </apply>
        </apply>    
    </library>
    
    <simulations>
        <!-- Do a pre-run to get the model to steady-state for the holding potential -->
        <timecourseSimulation>
            <vectorStepper name="time" units="ms">
                <value>0</value>
                <ci xmlns="http://www.w3.org/1998/Math/MathML">steady_state_time</ci>
            </vectorStepper>
            <modifiers>
                <setVariable>
                    <when>AT_START_ONLY</when>
                    <name>membrane_voltage</name>
                    <value>
                        <ci xmlns="http://www.w3.org/1998/Math/MathML">holding_potential</ci>
                    </value>
                </setVariable>
                <saveState>
                    <when>AT_END</when>
                    <name>holding_state</name>
                </saveState>
            </modifiers>
        </timecourseSimulation>
        
        <!-- Now do the IV curve generation for each Cao -->
        <nestedSimulation>
            <vectorStepper name="step_calcium_ratio" units="dimensionless">
                <value>0.5</value>
                <value>1.0</value>
                <value>1.5</value>
            </vectorStepper>
            <modifiers>
                <!-- Set the external calcium concentration -->
                <setVariable>
                    <when>EVERY_LOOP</when>
                    <name>extracellular_calcium_concentration</name>
                    <value>
                        <apply xmlns="http://www.w3.org/1998/Math/MathML"><times/>
                            <ci>step_calcium_ratio</ci>
                            <ci>default_Cao</ci>
                        </apply>
                    </value>
                </setVariable>
            </modifiers>
            <nestedSimulation>
                <vectorStepper name="step_voltage" units="mV">
                    <value>-45.01</value>
                    <value>-40.01</value>
                    <value>-35.01</value>
                    <value>-30.01</value>
                    <value>-25.01</value>
                    <value>-20.01</value>
                    <value>-15.01</value>
                    <value>-10.01</value>
                    <value>-5.01</value>
                    <value>-0.01</value>
                    <value>5.01</value>
                    <value>10.01</value>
                    <value>15.01</value>
                    <value>20.01</value>
                    <value>25.01</value>
                    <value>30.01</value>
                    <value>35.01</value>
                    <value>40.01</value>
                    <value>45.01</value>
                    <value>50.01</value>
                    <value>55.01</value>
                    <value>60.01</value>
                    <value>65.01</value>
                    <value>70.01</value>
                    <value>75.01</value>
                    <value>79.99</value>
                </vectorStepper>
                <modifiers>
                    <!-- Reset the model to holding potential -->
                    <resetState>
                        <when>EVERY_LOOP</when>
                        <state>holding_state</state>
                    </resetState>                    
                    <setVariable>
                        <when>EVERY_LOOP</when>
                        <name>membrane_voltage</name>
                        <value>
                            <ci xmlns="http://www.w3.org/1998/Math/MathML">holding_potential</ci>
                        </value>
                    </setVariable>
                </modifiers>
                <timecourseSimulation>
                    <uniformStepper name="time" units="ms">
                        <start>-10.0</start>
                        <stop>500.0</stop>
                        <step>0.05</step>
                    </uniformStepper>
                    <modifiers>
                        <setVariable>
                            <when>EVERY_LOOP</when>
                            <name>membrane_voltage</name>
                            <value>
                                <piecewise xmlns="http://www.w3.org/1998/Math/MathML">
                                    <piece>
                                        <ci>step_voltage</ci>
                                        <apply><lt/>
                                            <apply><abs/>
                                                <apply><minus/>
                                                    <ci>time</ci>
                                                    <cn>0</cn>
                                                </apply>
                                            </apply>
                                            <cn>1e-6</cn>
                                        </apply>
                                    </piece>
                                    <otherwise>
                                        <ci>membrane_voltage</ci>
                                    </otherwise>
                                </piecewise>
                            </value>
                        </setVariable>
                    </modifiers>
                </timecourseSimulation>
            </nestedSimulation>
        </nestedSimulation>
    </simulations>
    
    <post-processing>
        <apply xmlns="http://www.w3.org/1998/Math/MathML">
            <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList"/>
            
            <!-- Test that expected model outputs exist -->
            <apply>
                <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert"/>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor">IS_ARRAY</csymbol>
                    <ci>time</ci>
                </apply>
            </apply>
            <apply>
                <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert"/>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor">IS_ARRAY</csymbol>
                    <ci>membrane_voltage</ci>
                </apply>
            </apply>
            <apply>
                <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert"/>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor">IS_ARRAY</csymbol>
                    <ci>membrane_L_type_calcium_current</ci>
                </apply>
            </apply>
            
            <!-- Only examine the "tail currents" after t=0 -->
            <apply><eq/>
                <ci>membrane_L_type_calcium_tail_current</ci>
                <apply><ci>after</ci>
                    <ci>membrane_L_type_calcium_current</ci>
                    <ci>time</ci>
                    <cn>0</cn>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                </apply>
            </apply>
            
            <!-- Get the minimum tail current (this has the largest magnitude) as a 2d array -->
            <apply><eq/>
                <ci>min_LCC</ci>
                <apply><ci>remove_dim</ci>
                    <apply><ci>min</ci>
                        <ci>membrane_L_type_calcium_tail_current</ci>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter"/>
                    </apply>
                    <cn>2</cn>
                </apply>
            </apply>
            <!-- We'll plot against the final V, which is equal to the step voltage -->
            <apply><eq/>
                <ci>final_membrane_voltage</ci>
                <apply>
                    <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view"/>
                    <ci>membrane_voltage</ci>
                    <apply>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                        <cn>2</cn><cn>-1</cn><cn>0</cn><cn>-1</cn>
                    </apply>
                    <apply>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                        <cn>1</cn>
                        <csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null"/>
                    </apply>                    
                </apply>
            </apply>
        </apply>
    </post-processing>
    
    <outputVariables>
        <model name="extracellular_calcium_concentration" description="Extracellular calcium concentration"/>
        <model name="membrane_L_type_calcium_current" description="L-type calcium current"/>
        <model name="membrane_voltage" description="Transmembrane potential"/>
        <postprocessed name="membrane_L_type_calcium_tail_current" units="uA/cm^2"
            description="I_Ca_L after test potential applied"/>
        <postprocessed name="min_LCC" description="Minimum current" units="uA/cm^2"/>
        <postprocessed name="final_membrane_voltage" units="mV" description="Test potential"/>
    </outputVariables>
    
    <plots>
        <plot>
            <title>Current-voltage relationship</title>
            <x>final_membrane_voltage</x>
            <y>min_LCC</y>
        </plot>
    </plots>
</protocol>
