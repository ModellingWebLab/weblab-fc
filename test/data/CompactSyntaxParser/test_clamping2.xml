<?xml version='1.0' encoding='ASCII'?>
<proto:protocol xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:oxmeta="https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#" xmlns:proto="https://chaste.cs.ox.ac.uk/nss/protocol/0.1#" proto:loc="test/protocols/test_clamping2.txt:1:1&#9;# Test clamping state variables to a fixed value" xml:base="test/protocols/test_clamping2.txt">
  <proto:import source="BasicLibrary.txt" prefix="std" proto:loc="test/protocols/test_clamping2.txt:5:1&#9;import std = &quot;BasicLibrary.txt&quot;"/>
  <proto:units proto:loc="test/protocols/test_clamping2.txt:7:1&#9;units {">
    <cellml:units xmlns:cellml="http://www.cellml.org/cellml/1.0#" name="mV" proto:loc="test/protocols/test_clamping2.txt:8:5&#9;    mV = milli volt">
      <cellml:unit units="volt" prefix="milli" proto:loc="test/protocols/test_clamping2.txt:8:10&#9;    mV = milli volt"/>
    </cellml:units>
    <cellml:units xmlns:cellml="http://www.cellml.org/cellml/1.0#" name="ms" proto:loc="test/protocols/test_clamping2.txt:9:5&#9;    ms = milli second">
      <cellml:unit units="second" prefix="milli" proto:loc="test/protocols/test_clamping2.txt:9:10&#9;    ms = milli second"/>
    </cellml:units>
  </proto:units>
  <proto:modelInterface proto:loc="test/protocols/test_clamping2.txt:12:1&#9;model interface {">
    <proto:specifyOutputVariable name="oxmeta:membrane_voltage" units="mV" proto:loc="test/protocols/test_clamping2.txt:13:5&#9;    output oxmeta:membrane_voltage units mV"/>
    <proto:specifyOutputVariable name="oxmeta:time" units="ms" proto:loc="test/protocols/test_clamping2.txt:14:5&#9;    output oxmeta:time units ms"/>
    <proto:addOrReplaceEquation proto:loc="test/protocols/test_clamping2.txt:16:5&#9;    clamp oxmeta:membrane_voltage to 0 :: mV">
      <m:apply proto:loc="test/protocols/test_clamping2.txt:16:5&#9;    clamp oxmeta:membrane_voltage to 0 :: mV">
        <m:eq/>
        <m:ci proto:loc="test/protocols/test_clamping2.txt:16:11&#9;    clamp oxmeta:membrane_voltage to 0 :: mV">oxmeta:membrane_voltage</m:ci>
        <m:cn xmlns:ns1="http://www.cellml.org/cellml/1.0#" ns1:units="mV" proto:loc="test/protocols/test_clamping2.txt:16:38&#9;    clamp oxmeta:membrane_voltage to 0 :: mV">0</m:cn>
      </m:apply>
    </proto:addOrReplaceEquation>
  </proto:modelInterface>
  <proto:simulations proto:loc="test/protocols/test_clamping2.txt:19:1&#9;tasks {">
    <proto:timecourseSimulation proto:loc="test/protocols/test_clamping2.txt:20:5&#9;    simulation sim = timecourse {" prefix="sim">
      <proto:uniformStepper name="t" units="ms" proto:loc="test/protocols/test_clamping2.txt:21:9&#9;        range t units ms uniform 0:5">
        <proto:start>
          <m:cn proto:loc="test/protocols/test_clamping2.txt:21:34&#9;        range t units ms uniform 0:5">0</m:cn>
        </proto:start>
        <proto:stop>
          <m:cn proto:loc="test/protocols/test_clamping2.txt:21:36&#9;        range t units ms uniform 0:5">5</m:cn>
        </proto:stop>
        <proto:step>
          <m:cn proto:loc="test/protocols/test_clamping2.txt:21:9&#9;        range t units ms uniform 0:5">1</m:cn>
        </proto:step>
      </proto:uniformStepper>
      <proto:modifiers proto:loc="test/protocols/test_clamping2.txt:20:22&#9;    simulation sim = timecourse {"/>
    </proto:timecourseSimulation>
  </proto:simulations>
  <proto:post-processing proto:loc="test/protocols/test_clamping2.txt:25:1&#9;post-processing {">
    <m:apply proto:loc="test/protocols/test_clamping2.txt:25:1&#9;post-processing {">
      <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="test/protocols/test_clamping2.txt:25:1&#9;post-processing {"/>
      <m:apply proto:loc="test/protocols/test_clamping2.txt:26:5&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="test/protocols/test_clamping2.txt:26:5&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])"/>
        <m:apply proto:loc="test/protocols/test_clamping2.txt:26:12&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">
          <m:ci proto:loc="test/protocols/test_clamping2.txt:26:12&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">std:Close</m:ci>
          <m:ci proto:loc="test/protocols/test_clamping2.txt:26:22&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">sim:membrane_voltage</m:ci>
          <m:apply proto:loc="test/protocols/test_clamping2.txt:26:44&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:45&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:48&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:51&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:54&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:57&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
            <m:cn proto:loc="test/protocols/test_clamping2.txt:26:60&#9;    assert std:Close(sim:membrane_voltage, [0, 0, 0, 0, 0, 0])">0</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="test/protocols/test_clamping2.txt:27:5&#9;    assert std:Close(sim:time, [i for i in 0:6])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="test/protocols/test_clamping2.txt:27:5&#9;    assert std:Close(sim:time, [i for i in 0:6])"/>
        <m:apply proto:loc="test/protocols/test_clamping2.txt:27:12&#9;    assert std:Close(sim:time, [i for i in 0:6])">
          <m:ci proto:loc="test/protocols/test_clamping2.txt:27:12&#9;    assert std:Close(sim:time, [i for i in 0:6])">std:Close</m:ci>
          <m:ci proto:loc="test/protocols/test_clamping2.txt:27:22&#9;    assert std:Close(sim:time, [i for i in 0:6])">sim:time</m:ci>
          <m:apply proto:loc="test/protocols/test_clamping2.txt:27:32&#9;    assert std:Close(sim:time, [i for i in 0:6])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:domainofapplication>
              <m:apply proto:loc="test/protocols/test_clamping2.txt:27:35&#9;    assert std:Close(sim:time, [i for i in 0:6])">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                <m:cn proto:loc="test/protocols/test_clamping2.txt:27:44&#9;    assert std:Close(sim:time, [i for i in 0:6])">0</m:cn>
                <m:cn proto:loc="test/protocols/test_clamping2.txt:27:35&#9;    assert std:Close(sim:time, [i for i in 0:6])">1</m:cn>
                <m:cn proto:loc="test/protocols/test_clamping2.txt:27:46&#9;    assert std:Close(sim:time, [i for i in 0:6])">6</m:cn>
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="test/protocols/test_clamping2.txt:27:35&#9;    assert std:Close(sim:time, [i for i in 0:6])">i</m:csymbol>
              </m:apply>
            </m:domainofapplication>
            <m:ci proto:loc="test/protocols/test_clamping2.txt:27:33&#9;    assert std:Close(sim:time, [i for i in 0:6])">i</m:ci>
          </m:apply>
        </m:apply>
      </m:apply>
    </m:apply>
  </proto:post-processing>
  <proto:outputVariables proto:loc="test/protocols/test_clamping2.txt:30:1&#9;outputs {">
    <proto:raw name="V" ref="sim:membrane_voltage" proto:loc="test/protocols/test_clamping2.txt:31:5&#9;    V = sim:membrane_voltage"/>
  </proto:outputVariables>
</proto:protocol>
