<?xml version='1.0' encoding='ASCII'?>
<proto:protocol xmlns:oxmeta="https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:proto="https://chaste.cs.ox.ac.uk/nss/protocol/0.1#" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:1:1&#9;# Compact syntax version of the test_onestep_sim protocol" xml:base="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt">
  <proto:import source="BasicLibrary.txt" prefix="std" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:5:1&#9;import std = &quot;BasicLibrary.txt&quot;"/>
  <proto:units proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:7:1&#9;units {">
    <cellml:units xmlns:cellml="http://www.cellml.org/cellml/1.0#" name="ms" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:8:5&#9;    ms = milli second">
      <cellml:unit units="second" prefix="milli" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:8:10&#9;    ms = milli second"/>
    </cellml:units>
    <cellml:units xmlns:cellml="http://www.cellml.org/cellml/1.0#" name="mV" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:9:5&#9;    mV = milli volt">
      <cellml:unit units="volt" prefix="milli" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:9:10&#9;    mV = milli volt"/>
    </cellml:units>
    <cellml:units xmlns:cellml="http://www.cellml.org/cellml/1.0#" name="mV_per_ms" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:10:5&#9;    mV_per_ms = milli volt . milli second^-1">
      <cellml:unit units="volt" prefix="milli" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:10:17&#9;    mV_per_ms = milli volt . milli second^-1"/>
      <cellml:unit units="second" prefix="milli" exponent="-1" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:10:30&#9;    mV_per_ms = milli volt . milli second^-1"/>
    </cellml:units>
  </proto:units>
  <proto:modelInterface proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:14:1&#9;model interface {">
    <proto:setIndependentVariableUnits units="ms" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:15:5&#9;    independent var units ms"/>
    <proto:specifyInputVariable units="mV" name="oxmeta:membrane_voltage" initial_value="0.0" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:17:5&#9;    input oxmeta:membrane_voltage units mV = 0.0"/>
    <proto:specifyOutputVariable units="mV" name="oxmeta:membrane_voltage" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:19:5&#9;    output oxmeta:membrane_voltage units mV"/>
    <proto:addOrReplaceEquation proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:5&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:5&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">
        <m:eq/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:5&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">
          <m:diff/>
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:42&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">oxmeta:time</m:ci>
          </m:bvar>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:17&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">oxmeta:membrane_voltage</m:ci>
        </m:apply>
        <m:cn xmlns:ns1="http://www.cellml.org/cellml/1.0#" ns1:units="mV_per_ms" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:21:57&#9;    define diff(oxmeta:membrane_voltage; oxmeta:time) = 1 :: mV_per_ms">1</m:cn>
      </m:apply>
    </proto:addOrReplaceEquation>
  </proto:modelInterface>
  <proto:simulations proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:24:1&#9;tasks {">
    <proto:nestedSimulation proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:27:5&#9;    simulation nested = nested {" prefix="nested">
      <proto:uniformStepper units="ms" name="t" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:28:9&#9;        range t units ms uniform 0:9">
        <proto:start>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:28:34&#9;        range t units ms uniform 0:9">0</m:cn>
        </proto:start>
        <proto:stop>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:28:36&#9;        range t units ms uniform 0:9">9</m:cn>
        </proto:stop>
        <proto:step>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:28:9&#9;        range t units ms uniform 0:9">1</m:cn>
        </proto:step>
      </proto:uniformStepper>
      <proto:modifiers proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:29:9&#9;        modifiers { at each loop set oxmeta:time = t }">
        <proto:setVariable proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:29:21&#9;        modifiers { at each loop set oxmeta:time = t }">
          <proto:when proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:29:23&#9;        modifiers { at each loop set oxmeta:time = t }">EVERY_LOOP</proto:when>
          <proto:name>oxmeta:time</proto:name>
          <proto:value>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:29:52&#9;        modifiers { at each loop set oxmeta:time = t }">t</m:ci>
          </proto:value>
        </proto:setVariable>
      </proto:modifiers>
      <proto:oneStep step="1.0" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:30:15&#9;        nests simulation oneStep 1.0"/>
    </proto:nestedSimulation>
    <proto:timecourseSimulation proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:33:5&#9;    simulation timecourse = timecourse {" prefix="timecourse">
      <proto:uniformStepper units="ms" name="t" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:34:9&#9;        range t units ms uniform 0:10">
        <proto:start>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:34:34&#9;        range t units ms uniform 0:10">0</m:cn>
        </proto:start>
        <proto:stop>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:34:36&#9;        range t units ms uniform 0:10">10</m:cn>
        </proto:stop>
        <proto:step>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:34:9&#9;        range t units ms uniform 0:10">1</m:cn>
        </proto:step>
      </proto:uniformStepper>
      <proto:modifiers proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:35:9&#9;        modifiers { at start reset } # Since otherwise we'd start where nested stopped">
        <proto:resetState proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:35:21&#9;        modifiers { at start reset } # Since otherwise we'd start where nested stopped">
          <proto:when proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:35:23&#9;        modifiers { at start reset } # Since otherwise we'd start where nested stopped">AT_START_ONLY</proto:when>
        </proto:resetState>
      </proto:modifiers>
    </proto:timecourseSimulation>
    <proto:nestedSimulation proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:39:5&#9;    simulation nested2 = nested {" prefix="nested2">
      <proto:uniformStepper units="ms" name="t" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:40:9&#9;        range t units ms uniform 0:9">
        <proto:start>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:40:34&#9;        range t units ms uniform 0:9">0</m:cn>
        </proto:start>
        <proto:stop>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:40:36&#9;        range t units ms uniform 0:9">9</m:cn>
        </proto:stop>
        <proto:step>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:40:9&#9;        range t units ms uniform 0:9">1</m:cn>
        </proto:step>
      </proto:uniformStepper>
      <proto:modifiers proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:41:9&#9;        modifiers {at start reset} # Since otherwise we'd start where timecourse stopped">
        <proto:resetState proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:41:20&#9;        modifiers {at start reset} # Since otherwise we'd start where timecourse stopped">
          <proto:when proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:41:22&#9;        modifiers {at start reset} # Since otherwise we'd start where timecourse stopped">AT_START_ONLY</proto:when>
        </proto:resetState>
      </proto:modifiers>
      <proto:oneStep step="1.0" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:42:15&#9;        nests simulation oneStep 1.0 {">
        <proto:modifiers proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:43:13&#9;            modifiers { at start set oxmeta:time = t }">
          <proto:setVariable proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:43:25&#9;            modifiers { at start set oxmeta:time = t }">
            <proto:when proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:43:27&#9;            modifiers { at start set oxmeta:time = t }">AT_START_ONLY</proto:when>
            <proto:name>oxmeta:time</proto:name>
            <proto:value>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:43:52&#9;            modifiers { at start set oxmeta:time = t }">t</m:ci>
            </proto:value>
          </proto:setVariable>
        </proto:modifiers>
      </proto:oneStep>
    </proto:nestedSimulation>
  </proto:simulations>
  <proto:post-processing proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:48:1&#9;post-processing {">
    <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:48:1&#9;post-processing {">
      <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:48:1&#9;post-processing {"/>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:50:5&#9;    assert nested:membrane_voltage.IS_ARRAY">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:50:5&#9;    assert nested:membrane_voltage.IS_ARRAY"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:50:12&#9;    assert nested:membrane_voltage.IS_ARRAY">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:50:12&#9;    assert nested:membrane_voltage.IS_ARRAY">IS_ARRAY</m:csymbol>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:50:12&#9;    assert nested:membrane_voltage.IS_ARRAY">nested:membrane_voltage</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:51:5&#9;    assert timecourse:membrane_voltage.IS_ARRAY">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:51:5&#9;    assert timecourse:membrane_voltage.IS_ARRAY"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:51:12&#9;    assert timecourse:membrane_voltage.IS_ARRAY">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:51:12&#9;    assert timecourse:membrane_voltage.IS_ARRAY">IS_ARRAY</m:csymbol>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:51:12&#9;    assert timecourse:membrane_voltage.IS_ARRAY">timecourse:membrane_voltage</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:52:5&#9;    assert nested2:membrane_voltage.IS_ARRAY">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:52:5&#9;    assert nested2:membrane_voltage.IS_ARRAY"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:52:12&#9;    assert nested2:membrane_voltage.IS_ARRAY">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:52:12&#9;    assert nested2:membrane_voltage.IS_ARRAY">IS_ARRAY</m:csymbol>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:52:12&#9;    assert nested2:membrane_voltage.IS_ARRAY">nested2:membrane_voltage</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:5&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:5&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:12&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:12&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">std:ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:24&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:24&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">std:Join</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:33&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:34&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">0</m:cn>
            </m:apply>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:38&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">nested:membrane_voltage</m:ci>
          </m:apply>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:55:64&#9;    assert std:ArrayEq(std:Join([0], nested:membrane_voltage), timecourse:membrane_voltage)">timecourse:membrane_voltage</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:5&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:5&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:12&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:12&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)">std:ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:24&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)">nested:membrane_voltage</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:56:49&#9;    assert std:ArrayEq(nested:membrane_voltage, nested2:membrane_voltage)">nested2:membrane_voltage</m:ci>
        </m:apply>
      </m:apply>
    </m:apply>
  </proto:post-processing>
  <proto:outputVariables proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:59:1&#9;outputs {">
    <proto:raw ref="nested:membrane_voltage" name="V_nested" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:60:5&#9;    V_nested = nested:membrane_voltage"/>
    <proto:raw ref="timecourse:membrane_voltage" name="V_timecourse" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:61:5&#9;    V_timecourse = timecourse:membrane_voltage"/>
    <proto:raw ref="nested2:membrane_voltage" name="V_nested2" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_onestep_sim.txt:62:5&#9;    V_nested2 = nested2:membrane_voltage"/>
  </proto:outputVariables>
</proto:protocol>
