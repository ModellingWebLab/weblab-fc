<?xml version='1.0' encoding='ASCII'?>
<proto:protocol xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:proto="https://chaste.cs.ox.ac.uk/nss/protocol/0.1#" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:1:1&#9;# Compact version of the test_core_postproc protocol" xml:base="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt">
  <proto:inputs proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:3:1&#9;inputs {">
    <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:4:1&#9;    example_input = 0">
      <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:4:1&#9;    example_input = 0"/>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:4:5&#9;    example_input = 0">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:4:5&#9;    example_input = 0">example_input</m:ci>
        <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:4:21&#9;    example_input = 0">0</m:cn>
      </m:apply>
    </m:apply>
  </proto:inputs>
  <proto:import source="../../../src/proto/library/BasicLibrary.xml" mergeDefinitions="true" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:7:1&#9;import &quot;../../../src/proto/library/BasicLibrary.xml&quot;"/>
  <proto:post-processing proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:9:1&#9;post-processing {">
    <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:9:1&#9;post-processing {">
      <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:9:1&#9;post-processing {"/>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:5&#9;    def sum(a, dim=default) {">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:9&#9;    def sum(a, dim=default) {">sum</m:ci>
        <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:5&#9;    def sum(a, dim=default) {">
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:13&#9;    def sum(a, dim=default) {">a</m:ci>
          </m:bvar>
          <m:semantics>
            <m:bvar>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:16&#9;    def sum(a, dim=default) {">dim</m:ci>
            </m:bvar>
            <m:annotation-xml>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:10:20&#9;    def sum(a, dim=default) {"/>
            </m:annotation-xml>
          </m:semantics>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:9&#9;        return fold(@2:+, a, 0, dim)">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:9&#9;        return fold(@2:+, a, 0, dim)"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:9&#9;        return fold(@2:+, a, 0, dim)">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/return" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:9&#9;        return fold(@2:+, a, 0, dim)"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:16&#9;        return fold(@2:+, a, 0, dim)">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/fold" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:16&#9;        return fold(@2:+, a, 0, dim)"/>
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:21&#9;        return fold(@2:+, a, 0, dim)">plus</m:csymbol>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:27&#9;        return fold(@2:+, a, 0, dim)">a</m:ci>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:30&#9;        return fold(@2:+, a, 0, dim)">0</m:cn>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:11:33&#9;        return fold(@2:+, a, 0, dim)">dim</m:ci>
              </m:apply>
            </m:apply>
          </m:apply>
        </m:lambda>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:5&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:5&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">max</m:ci>
        <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:11&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:18&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">a</m:ci>
          </m:bvar>
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:21&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">dim</m:ci>
          </m:bvar>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:26&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/fold" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:26&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)"/>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:31&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">max</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:46&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">a</m:ci>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/defaultParameter" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:49&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:13:58&#9;    max = lambda a, dim: fold(@2:MathML:max, a, default, dim)">dim</m:ci>
          </m:apply>
        </m:lambda>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:5&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:5&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">input</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:13&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:15&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">1</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:18&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">2</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:21&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">3</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:24&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">4</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:27&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">5</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:30&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">6</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:33&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">7</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:36&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">8</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:39&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">9</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:15:42&#9;    input = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]">10</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:16:5&#9;    input_sum = sum(input)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:16:5&#9;    input_sum = sum(input)">input_sum</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:16:17&#9;    input_sum = sum(input)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:16:17&#9;    input_sum = sum(input)">sum</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:16:21&#9;    input_sum = sum(input)">input</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:5&#9;    assert input_sum[0] == 55">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:5&#9;    assert input_sum[0] == 55"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">input_sum</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:22&#9;    assert input_sum[0] == 55">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:22&#9;    assert input_sum[0] == 55">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:12&#9;    assert input_sum[0] == 55"/>
            </m:apply>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:17:28&#9;    assert input_sum[0] == 55">55</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:5&#9;    input2d = [ [1,3,5], [6,4,2] ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:5&#9;    input2d = [ [1,3,5], [6,4,2] ]">input2d</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:15&#9;    input2d = [ [1,3,5], [6,4,2] ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:17&#9;    input2d = [ [1,3,5], [6,4,2] ]">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:18&#9;    input2d = [ [1,3,5], [6,4,2] ]">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:20&#9;    input2d = [ [1,3,5], [6,4,2] ]">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:22&#9;    input2d = [ [1,3,5], [6,4,2] ]">5</m:cn>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:26&#9;    input2d = [ [1,3,5], [6,4,2] ]">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:27&#9;    input2d = [ [1,3,5], [6,4,2] ]">6</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:29&#9;    input2d = [ [1,3,5], [6,4,2] ]">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:18:31&#9;    input2d = [ [1,3,5], [6,4,2] ]">2</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:5&#9;    input2d_max = max(input2d, 0)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:5&#9;    input2d_max = max(input2d, 0)">input2d_max</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:19&#9;    input2d_max = max(input2d, 0)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:19&#9;    input2d_max = max(input2d, 0)">max</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:23&#9;    input2d_max = max(input2d, 0)">input2d</m:ci>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:19:32&#9;    input2d_max = max(input2d, 0)">0</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:5&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:5&#9;    assert ArrayEq(input2d_max, [[6,4,5]])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:12&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:12&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:20&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">input2d_max</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:33&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:34&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:35&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">6</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:37&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">4</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:20:39&#9;    assert ArrayEq(input2d_max, [[6,4,5]])">5</m:cn>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:5&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:5&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">input2d_slice</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly"/>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">input2d</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:29&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:31&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:33&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">2</m:cn>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly"/>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly">1</m:cn>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:21:21&#9;    input2d_slice = input2d[1$1:2] # [*$:] added implicitly"/>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:5&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:5&#9;    assert ArrayEq(input2d_slice, [[3], [4]])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:12&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:12&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:20&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">input2d_slice</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:35&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:36&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:37&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">3</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:41&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:22:42&#9;    assert ArrayEq(input2d_slice, [[3], [4]])">4</m:cn>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:5&#9;    input2 = [ 1, 2, 3 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:5&#9;    input2 = [ 1, 2, 3 ]">input2</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:14&#9;    input2 = [ 1, 2, 3 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:16&#9;    input2 = [ 1, 2, 3 ]">1</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:19&#9;    input2 = [ 1, 2, 3 ]">2</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:23:22&#9;    input2 = [ 1, 2, 3 ]">3</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:5&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:5&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">map_result</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:18&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/map" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:18&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:22&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">plus</m:csymbol>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">input2d_max</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:40&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:40&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:28&#9;    map_result = map(@2:+, input2d_max[0][:], input2)"/>
            </m:apply>
          </m:apply>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:24:47&#9;    map_result = map(@2:+, input2d_max[0][:], input2)">input2</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:5&#9;    assert ArrayEq(map_result, [7, 6, 8])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:5&#9;    assert ArrayEq(map_result, [7, 6, 8])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:12&#9;    assert ArrayEq(map_result, [7, 6, 8])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:12&#9;    assert ArrayEq(map_result, [7, 6, 8])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:20&#9;    assert ArrayEq(map_result, [7, 6, 8])">map_result</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:32&#9;    assert ArrayEq(map_result, [7, 6, 8])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:33&#9;    assert ArrayEq(map_result, [7, 6, 8])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:36&#9;    assert ArrayEq(map_result, [7, 6, 8])">6</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:25:39&#9;    assert ArrayEq(map_result, [7, 6, 8])">8</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:5&#9;    adder = lambda input: map(@2:+, input, input2)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:5&#9;    adder = lambda input: map(@2:+, input, input2)">adder</m:ci>
        <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:13&#9;    adder = lambda input: map(@2:+, input, input2)">
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:20&#9;    adder = lambda input: map(@2:+, input, input2)">input</m:ci>
          </m:bvar>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:27&#9;    adder = lambda input: map(@2:+, input, input2)">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/map" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:27&#9;    adder = lambda input: map(@2:+, input, input2)"/>
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/wrap/2" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:31&#9;    adder = lambda input: map(@2:+, input, input2)">plus</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:37&#9;    adder = lambda input: map(@2:+, input, input2)">input</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:27:44&#9;    adder = lambda input: map(@2:+, input, input2)">input2</m:ci>
          </m:apply>
        </m:lambda>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:28:5&#9;    double_input2 = adder(input2)">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:28:5&#9;    double_input2 = adder(input2)">double_input2</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:28:21&#9;    double_input2 = adder(input2)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:28:21&#9;    double_input2 = adder(input2)">adder</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:28:27&#9;    double_input2 = adder(input2)">input2</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:5&#9;    assert ArrayEq(double_input2, [2, 4, 6])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:5&#9;    assert ArrayEq(double_input2, [2, 4, 6])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:12&#9;    assert ArrayEq(double_input2, [2, 4, 6])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:12&#9;    assert ArrayEq(double_input2, [2, 4, 6])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:20&#9;    assert ArrayEq(double_input2, [2, 4, 6])">double_input2</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:35&#9;    assert ArrayEq(double_input2, [2, 4, 6])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:36&#9;    assert ArrayEq(double_input2, [2, 4, 6])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:39&#9;    assert ArrayEq(double_input2, [2, 4, 6])">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:29:42&#9;    assert ArrayEq(double_input2, [2, 4, 6])">6</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:5&#9;    assert (if 1 then 2 else 3) == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:5&#9;    assert (if 1 then 2 else 3) == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:12&#9;    assert (if 1 then 2 else 3) == 2">
          <m:eq/>
          <m:piecewise proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:13&#9;    assert (if 1 then 2 else 3) == 2">
            <m:piece>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:23&#9;    assert (if 1 then 2 else 3) == 2">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:16&#9;    assert (if 1 then 2 else 3) == 2">1</m:cn>
            </m:piece>
            <m:otherwise>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:30&#9;    assert (if 1 then 2 else 3) == 2">3</m:cn>
            </m:otherwise>
          </m:piecewise>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:32:36&#9;    assert (if 1 then 2 else 3) == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:5&#9;    assert (if 0 then 2 else 3) == 3">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:5&#9;    assert (if 0 then 2 else 3) == 3"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:12&#9;    assert (if 0 then 2 else 3) == 3">
          <m:eq/>
          <m:piecewise proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:13&#9;    assert (if 0 then 2 else 3) == 3">
            <m:piece>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:23&#9;    assert (if 0 then 2 else 3) == 3">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:16&#9;    assert (if 0 then 2 else 3) == 3">0</m:cn>
            </m:piece>
            <m:otherwise>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:30&#9;    assert (if 0 then 2 else 3) == 3">3</m:cn>
            </m:otherwise>
          </m:piecewise>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:33:36&#9;    assert (if 0 then 2 else 3) == 3">3</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:5&#9;    counting1d = [ i for 0$i in 0:10 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:5&#9;    counting1d = [ i for 0$i in 0:10 ]">counting1d</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:18&#9;    counting1d = [ i for 0$i in 0:10 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:domainofapplication>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:22&#9;    counting1d = [ i for 0$i in 0:10 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:26&#9;    counting1d = [ i for 0$i in 0:10 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:33&#9;    counting1d = [ i for 0$i in 0:10 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:22&#9;    counting1d = [ i for 0$i in 0:10 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:35&#9;    counting1d = [ i for 0$i in 0:10 ]">10</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:22&#9;    counting1d = [ i for 0$i in 0:10 ]">i</m:csymbol>
            </m:apply>
          </m:domainofapplication>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:37:20&#9;    counting1d = [ i for 0$i in 0:10 ]">i</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:5&#9;    assert counting1d.NUM_DIMS == 1">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:5&#9;    assert counting1d.NUM_DIMS == 1"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:12&#9;    assert counting1d.NUM_DIMS == 1">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:12&#9;    assert counting1d.NUM_DIMS == 1">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:12&#9;    assert counting1d.NUM_DIMS == 1">NUM_DIMS</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:12&#9;    assert counting1d.NUM_DIMS == 1">counting1d</m:ci>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:38:35&#9;    assert counting1d.NUM_DIMS == 1">1</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:5&#9;    assert counting1d.SHAPE[0] == 10">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:5&#9;    assert counting1d.SHAPE[0] == 10"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">SHAPE</m:csymbol>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">counting1d</m:ci>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:29&#9;    assert counting1d.SHAPE[0] == 10">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:29&#9;    assert counting1d.SHAPE[0] == 10">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:12&#9;    assert counting1d.SHAPE[0] == 10"/>
            </m:apply>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:39:35&#9;    assert counting1d.SHAPE[0] == 10">10</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:5&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:5&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:12&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:12&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:20&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">counting1d</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:32&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:33&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">0</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:35&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:37&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:39&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:41&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:43&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">5</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:45&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">6</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:47&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:49&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">8</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:40:51&#9;    assert ArrayEq(counting1d, [0,1,2,3,4,5,6,7,8,9])">9</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:5&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:5&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:12&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:12&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:20&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">counting1d</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:32&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:domainofapplication>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:36&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:45&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">0</m:cn>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:36&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">1</m:cn>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:47&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">10</m:cn>
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:36&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">i</m:csymbol>
              </m:apply>
            </m:domainofapplication>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:41:34&#9;    assert ArrayEq(counting1d, [ i for i in 0:10 ]) # Implicit dimension number">i</m:ci>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:5&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:5&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">counting2d</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:18&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:domainofapplication>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:28&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:32&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:39&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:28&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:41&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">3</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:28&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">i</m:csymbol>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:43&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:47&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:54&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:43&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:56&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">3</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:43&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">j</m:csymbol>
            </m:apply>
          </m:domainofapplication>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:20&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
            <m:plus/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:20&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">
              <m:times/>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:20&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">i</m:ci>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:22&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">3</m:cn>
            </m:apply>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:43:26&#9;    counting2d = [ i*3 + j for 0$i in 1:3 for 1$j in 0:3 ]">j</m:ci>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:5&#9;    assert counting2d.NUM_DIMS == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:5&#9;    assert counting2d.NUM_DIMS == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:12&#9;    assert counting2d.NUM_DIMS == 2">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:12&#9;    assert counting2d.NUM_DIMS == 2">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:12&#9;    assert counting2d.NUM_DIMS == 2">NUM_DIMS</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:12&#9;    assert counting2d.NUM_DIMS == 2">counting2d</m:ci>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:44:35&#9;    assert counting2d.NUM_DIMS == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:5&#9;    assert counting2d.NUM_ELEMENTS == 6">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:5&#9;    assert counting2d.NUM_ELEMENTS == 6"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:12&#9;    assert counting2d.NUM_ELEMENTS == 6">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:12&#9;    assert counting2d.NUM_ELEMENTS == 6">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:12&#9;    assert counting2d.NUM_ELEMENTS == 6">NUM_ELEMENTS</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:12&#9;    assert counting2d.NUM_ELEMENTS == 6">counting2d</m:ci>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:45:39&#9;    assert counting2d.NUM_ELEMENTS == 6">6</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:5&#9;    assert counting2d.SHAPE[0] == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:5&#9;    assert counting2d.SHAPE[0] == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">SHAPE</m:csymbol>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">counting2d</m:ci>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:29&#9;    assert counting2d.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:29&#9;    assert counting2d.SHAPE[0] == 2">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:12&#9;    assert counting2d.SHAPE[0] == 2"/>
            </m:apply>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:46:35&#9;    assert counting2d.SHAPE[0] == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:5&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:5&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:12&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:12&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:20&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">counting2d</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:32&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:33&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:34&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:37&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">4</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:40&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">5</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:44&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:45&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">6</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:48&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">7</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:47:51&#9;    assert ArrayEq(counting2d, [[3, 4, 5], [6, 7, 8]])">8</m:cn>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:5&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:5&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">counting2d_alt</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:22&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:domainofapplication>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:32&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:36&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:43&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:32&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:45&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">3</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:32&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">j</m:csymbol>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:47&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:51&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:58&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:47&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:60&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">3</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:47&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">i</m:csymbol>
            </m:apply>
          </m:domainofapplication>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:24&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
            <m:plus/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:24&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">
              <m:times/>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:24&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">i</m:ci>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:26&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">3</m:cn>
            </m:apply>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:49:30&#9;    counting2d_alt = [ i*3 + j for 1$j in 0:3 for 0$i in 1:3 ]">j</m:ci>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:5&#9;    assert ArrayEq(counting2d, counting2d_alt)">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:5&#9;    assert ArrayEq(counting2d, counting2d_alt)"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:12&#9;    assert ArrayEq(counting2d, counting2d_alt)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:12&#9;    assert ArrayEq(counting2d, counting2d_alt)">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:20&#9;    assert ArrayEq(counting2d, counting2d_alt)">counting2d</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:50:32&#9;    assert ArrayEq(counting2d, counting2d_alt)">counting2d_alt</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:5&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:5&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">blocks</m:ci>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:14&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
          <m:domainofapplication>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:40&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:44&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:51&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:40&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:53&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">2</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/string" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:40&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">j</m:csymbol>
            </m:apply>
          </m:domainofapplication>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:16&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:17&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:18&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
                <m:plus/>
                <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:18&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
                  <m:minus/>
                  <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:19&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">10</m:cn>
                </m:apply>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:22&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">j</m:ci>
              </m:apply>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:24&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">j</m:ci>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:27&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:28&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
                <m:plus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:28&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">10</m:cn>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:31&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">j</m:ci>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:33&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">
                <m:plus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:33&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">20</m:cn>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:52:36&#9;    blocks = [ [[-10+j,j],[10+j,20+j]] for 1$j in 0:2 ]">j</m:ci>
              </m:apply>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:5&#9;    assert blocks.NUM_DIMS == 3">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:5&#9;    assert blocks.NUM_DIMS == 3"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:12&#9;    assert blocks.NUM_DIMS == 3">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:12&#9;    assert blocks.NUM_DIMS == 3">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:12&#9;    assert blocks.NUM_DIMS == 3">NUM_DIMS</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:12&#9;    assert blocks.NUM_DIMS == 3">blocks</m:ci>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:53:31&#9;    assert blocks.NUM_DIMS == 3">3</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:5&#9;    assert blocks.NUM_ELEMENTS == 8">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:5&#9;    assert blocks.NUM_ELEMENTS == 8"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:12&#9;    assert blocks.NUM_ELEMENTS == 8">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:12&#9;    assert blocks.NUM_ELEMENTS == 8">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:12&#9;    assert blocks.NUM_ELEMENTS == 8">NUM_ELEMENTS</m:csymbol>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:12&#9;    assert blocks.NUM_ELEMENTS == 8">blocks</m:ci>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:54:35&#9;    assert blocks.NUM_ELEMENTS == 8">8</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:5&#9;    assert blocks.SHAPE[0] == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:5&#9;    assert blocks.SHAPE[0] == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">SHAPE</m:csymbol>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">blocks</m:ci>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:25&#9;    assert blocks.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:25&#9;    assert blocks.SHAPE[0] == 2">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:12&#9;    assert blocks.SHAPE[0] == 2"/>
            </m:apply>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:55:31&#9;    assert blocks.SHAPE[0] == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:5&#9;    assert blocks.SHAPE[1] == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:5&#9;    assert blocks.SHAPE[1] == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">SHAPE</m:csymbol>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">blocks</m:ci>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:25&#9;    assert blocks.SHAPE[1] == 2">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:25&#9;    assert blocks.SHAPE[1] == 2">1</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:12&#9;    assert blocks.SHAPE[1] == 2"/>
            </m:apply>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:56:31&#9;    assert blocks.SHAPE[1] == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:5&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:5&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:12&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:12&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">ArrayEq</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:20&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">blocks</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:28&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:30&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:31&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
                <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:32&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                  <m:minus/>
                  <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:33&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">10</m:cn>
                </m:apply>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:36&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">0</m:cn>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:40&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
                <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:41&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                  <m:minus/>
                  <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:42&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">9</m:cn>
                </m:apply>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:44&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">1</m:cn>
              </m:apply>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:50&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:51&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:52&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">10</m:cn>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:55&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">20</m:cn>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:60&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">
                <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:61&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">11</m:cn>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:57:64&#9;    assert ArrayEq(blocks, [ [[-10,0], [-9,1]] , [[10,20], [11,21]] ])">21</m:cn>
              </m:apply>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:5&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:5&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:12&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:12&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">0</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:27&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:28&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">1</m:cn>
              </m:apply>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:20&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:33&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:35&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">10</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:39&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">9</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:42&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">8</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:45&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:48&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">6</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:51&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">5</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:54&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:57&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:60&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:60:63&#9;    assert ArrayEq(input[:-1:], [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ])">1</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:5&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:5&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:12&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:12&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">0</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:27&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:28&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">1</m:cn>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:30&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:31&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">3</m:cn>
              </m:apply>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:20&#9;    assert ArrayEq(input[:-1:-3], [10, 9])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:35&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:36&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">10</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:64:40&#9;    assert ArrayEq(input[:-1:-3], [10, 9])">9</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:5&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:5&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:12&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:12&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:26&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">3</m:cn>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:28&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:29&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">1</m:cn>
              </m:apply>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:20&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:34&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:35&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:38&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:41&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:65:44&#9;    assert ArrayEq(input[3:-1:], [4, 3, 2, 1])">1</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:5&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:5&#9;    assert ArrayEq(input[4:-1:2], [5, 4])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:12&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:12&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:26&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">4</m:cn>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:28&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:29&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">1</m:cn>
              </m:apply>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:31&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">2</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:20&#9;    assert ArrayEq(input[4:-1:2], [5, 4])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:35&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:36&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">5</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:66:39&#9;    assert ArrayEq(input[4:-1:2], [5, 4])">4</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:5&#9;    assert ArrayEq(input[2:-2:0], [3])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:5&#9;    assert ArrayEq(input[2:-2:0], [3])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:12&#9;    assert ArrayEq(input[2:-2:0], [3])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:12&#9;    assert ArrayEq(input[2:-2:0], [3])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:26&#9;    assert ArrayEq(input[2:-2:0], [3])">2</m:cn>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:28&#9;    assert ArrayEq(input[2:-2:0], [3])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:29&#9;    assert ArrayEq(input[2:-2:0], [3])">2</m:cn>
              </m:apply>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:31&#9;    assert ArrayEq(input[2:-2:0], [3])">0</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:20&#9;    assert ArrayEq(input[2:-2:0], [3])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:35&#9;    assert ArrayEq(input[2:-2:0], [3])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:67:36&#9;    assert ArrayEq(input[2:-2:0], [3])">3</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:5&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:5&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:12&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:12&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">0</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:26&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">2</m:cn>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:28&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:29&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">2</m:cn>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:31&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:32&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">11</m:cn>
              </m:apply>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:20&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:37&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:38&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:68:41&#9;    assert ArrayEq(input[2:-2:-11], [3, 1])">1</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:5&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:5&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:12&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:12&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">0</m:cn>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:26&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:27&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">1</m:cn>
              </m:apply>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:29&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:30&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">3</m:cn>
              </m:apply>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:20&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])"/>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:35&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:36&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">10</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:40&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:43&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">4</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:69:46&#9;    assert ArrayEq(input[-1:-3:], [10, 7, 4, 1])">1</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:5&#9;    swap = lambda a, b { return b, a }">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:5&#9;    swap = lambda a, b { return b, a }">swap</m:ci>
        <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:12&#9;    swap = lambda a, b { return b, a }">
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:19&#9;    swap = lambda a, b { return b, a }">a</m:ci>
          </m:bvar>
          <m:bvar>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:22&#9;    swap = lambda a, b { return b, a }">b</m:ci>
          </m:bvar>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:26&#9;    swap = lambda a, b { return b, a }">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:26&#9;    swap = lambda a, b { return b, a }"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:26&#9;    swap = lambda a, b { return b, a }">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/return" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:26&#9;    swap = lambda a, b { return b, a }"/>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:33&#9;    swap = lambda a, b { return b, a }">b</m:ci>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:72:36&#9;    swap = lambda a, b { return b, a }">a</m:ci>
            </m:apply>
          </m:apply>
        </m:lambda>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:5&#9;    one, two = swap(2, 1)">
        <m:eq/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:5&#9;    one, two = swap(2, 1)">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:5&#9;    one, two = swap(2, 1)">one</m:ci>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:10&#9;    one, two = swap(2, 1)">two</m:ci>
        </m:apply>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:16&#9;    one, two = swap(2, 1)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:16&#9;    one, two = swap(2, 1)">swap</m:ci>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:21&#9;    one, two = swap(2, 1)">2</m:cn>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:73:24&#9;    one, two = swap(2, 1)">1</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:74:5&#9;    assert swap.IS_FUNCTION">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:74:5&#9;    assert swap.IS_FUNCTION"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:74:12&#9;    assert swap.IS_FUNCTION">
          <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/accessor" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:74:12&#9;    assert swap.IS_FUNCTION">IS_FUNCTION</m:csymbol>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:74:12&#9;    assert swap.IS_FUNCTION">swap</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:75:5&#9;    assert one == 1">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:75:5&#9;    assert one == 1"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:75:12&#9;    assert one == 1">
          <m:eq/>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:75:12&#9;    assert one == 1">one</m:ci>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:75:19&#9;    assert one == 1">1</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:76:5&#9;    assert two == 2">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:76:5&#9;    assert two == 2"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:76:12&#9;    assert two == 2">
          <m:eq/>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:76:12&#9;    assert two == 2">two</m:ci>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:76:19&#9;    assert two == 2">2</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:79:5&#9;    nested_scopes = lambda {">
        <m:eq/>
        <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:79:5&#9;    nested_scopes = lambda {">nested_scopes</m:ci>
        <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:79:21&#9;    nested_scopes = lambda {">
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:9&#9;        nested_fn = lambda input: input + outer_var">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/statementList" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:9&#9;        nested_fn = lambda input: input + outer_var"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:9&#9;        nested_fn = lambda input: input + outer_var">
              <m:eq/>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:9&#9;        nested_fn = lambda input: input + outer_var">nested_fn</m:ci>
              <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:21&#9;        nested_fn = lambda input: input + outer_var">
                <m:bvar>
                  <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:28&#9;        nested_fn = lambda input: input + outer_var">input</m:ci>
                </m:bvar>
                <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:35&#9;        nested_fn = lambda input: input + outer_var">
                  <m:plus/>
                  <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:35&#9;        nested_fn = lambda input: input + outer_var">input</m:ci>
                  <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:81:43&#9;        nested_fn = lambda input: input + outer_var">outer_var</m:ci>
                </m:apply>
              </m:lambda>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:83:9&#9;        outer_var = 1">
              <m:eq/>
              <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:83:9&#9;        outer_var = 1">outer_var</m:ci>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:83:21&#9;        outer_var = 1">1</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:9&#9;        assert nested_fn(1) == 2">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:9&#9;        assert nested_fn(1) == 2"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:16&#9;        assert nested_fn(1) == 2">
                <m:eq/>
                <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:16&#9;        assert nested_fn(1) == 2">
                  <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:16&#9;        assert nested_fn(1) == 2">nested_fn</m:ci>
                  <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:26&#9;        assert nested_fn(1) == 2">1</m:cn>
                </m:apply>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:85:32&#9;        assert nested_fn(1) == 2">2</m:cn>
              </m:apply>
            </m:apply>
          </m:apply>
        </m:lambda>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:5&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:5&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:12&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">
          <m:eq/>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:12&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:12&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">Count</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:18&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">input</m:ci>
            <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:25&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">
              <m:bvar>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:32&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">elt</m:ci>
              </m:bvar>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:37&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">
                <m:lt/>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:37&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">elt</m:ci>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:43&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">5</m:cn>
              </m:apply>
            </m:lambda>
          </m:apply>
          <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:89:49&#9;    assert Count(input, lambda elt: elt &lt; 5) == 4">4</m:cn>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:5&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:5&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:12&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:12&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:20&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:20&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">Filter</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:27&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">input</m:ci>
            <m:lambda proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:34&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
              <m:bvar>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:41&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">elt</m:ci>
              </m:bvar>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:46&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
                <m:lt/>
                <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:46&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">elt</m:ci>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:52&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">5</m:cn>
              </m:apply>
            </m:lambda>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:56&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:57&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">1</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:59&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:61&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:92:63&#9;    assert ArrayEq(Filter(input, lambda elt: elt &lt; 5), [1,2,3,4])">4</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:5&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:5&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:12&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:12&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:20&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:20&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">Permute</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:28&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:35&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:36&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">9</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:38&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">8</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:40&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">7</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:42&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">6</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:44&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">5</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:46&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">4</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:48&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:50&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:52&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:54&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">0</m:cn>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/view" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">input</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">0</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
              <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:66&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
                <m:minus/>
                <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:67&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">1</m:cn>
              </m:apply>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/tuple"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])">1</m:cn>
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/null" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:96:59&#9;    assert ArrayEq(Permute(input, [9,8,7,6,5,4,3,2,1,0]), input[:-1:])"/>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:5&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:5&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:12&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:12&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:20&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:20&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">Permute</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:28&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">input2d</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:37&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:38&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:40&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:42&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">0</m:cn>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:47&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:48&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:49&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:51&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">5</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:53&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">1</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:57&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:58&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">4</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:60&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:97:62&#9;    assert ArrayEq(Permute(input2d, [1,2,0]), [[3,5,1], [4,2,6]])">6</m:cn>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:5&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:5&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:12&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:12&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:20&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:20&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">Sort</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:25&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:26&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:28&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">7</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:30&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">5</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:32&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:34&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">9</m:cn>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:39&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:40&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:42&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:44&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">5</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:46&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:99:48&#9;    assert ArrayEq(Sort([3,7,5,2,9]), [2,3,5,7,9])">9</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:5&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:5&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:12&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:12&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:20&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:20&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">Sort</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:25&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:26&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:28&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">7</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:30&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">11</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:33&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:35&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">9</m:cn>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:40&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:41&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">2</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:43&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">3</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:45&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">7</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:47&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">9</m:cn>
            <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:100:49&#9;    assert ArrayEq(Sort([3,7,11,2,9]), [2,3,7,9,11])">11</m:cn>
          </m:apply>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:5&#9;    assert ArrayEq(Sort(input), input)">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:5&#9;    assert ArrayEq(Sort(input), input)"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:12&#9;    assert ArrayEq(Sort(input), input)">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:12&#9;    assert ArrayEq(Sort(input), input)">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:20&#9;    assert ArrayEq(Sort(input), input)">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:20&#9;    assert ArrayEq(Sort(input), input)">Sort</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:25&#9;    assert ArrayEq(Sort(input), input)">input</m:ci>
          </m:apply>
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:101:33&#9;    assert ArrayEq(Sort(input), input)">input</m:ci>
        </m:apply>
      </m:apply>
      <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:5&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
        <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/assert" proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:5&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])"/>
        <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:12&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
          <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:12&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">ArrayEq</m:ci>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:20&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:20&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">SortBy</m:ci>
            <m:ci proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:27&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">input2d</m:ci>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:36&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:37&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:39&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">1</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:41&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">2</m:cn>
            </m:apply>
          </m:apply>
          <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:46&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
            <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:48&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:49&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">3</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:51&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">5</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:53&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">1</m:cn>
            </m:apply>
            <m:apply proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:57&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">
              <m:csymbol definitionURL="https://chaste.cs.ox.ac.uk/nss/protocol/newArray"/>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:58&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">4</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:60&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">2</m:cn>
              <m:cn proto:loc="projects/FunctionalCuration/test/protocols/compact/test_core_postproc.txt:103:62&#9;    assert ArrayEq(SortBy(input2d, [3,1,2]), [ [3,5,1], [4,2,6] ])">6</m:cn>
            </m:apply>
          </m:apply>
        </m:apply>
      </m:apply>
    </m:apply>
  </proto:post-processing>
</proto:protocol>
