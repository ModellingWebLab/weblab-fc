# Compact syntax version of the ICaL protocol

documentation {
# ICaL Peak Current I-V Curve
This protocol implements a protocol to record the ICaL Peak Current I-V relationship
for cardiac electrophysiology cell models.

By clamping intra/extra-cellular calcium, we can throw away most of
the equations of the models to leave just the ICaL components to study.

## Parameters

* **holding\_potential**  The potential at which the cell rests before voltage steps are applied at t=0 (mV).
* **steady\_state\_time**  The amount of time to leave the current at holding potential before applying steps (ms).
* **test\_potentials**  A list of voltages (steps) to clamp the cell to before recording ICaL (mV).

It requires models to provide variables with the annotations:

* **oxmeta:membrane\_voltage**
* **oxmeta:membrane\_L\_type\_calcium\_current **
* **oxmeta:time**

Optionally:
* **oxmeta:extracellular\_calcium\_concentration**
* **oxmeta:cytosolic\_calcium\_concentration**
* **oxmeta:extracellular\_potassium\_concentration**
* **oxmeta:cytosolic\_potassium\_concentration**
}

namespace oxmeta = "https://chaste.comlab.ox.ac.uk/cellml/ns/oxford-metadata#"

inputs {
    holding_potential = -50
    # How long to simulate for to get to steady state at the holding potential
    steady_state_time = 10000
    # The values to step the transmembrane potential to
    test_potentials = [ 0.01 + 0.01*i for i in -4500:250:8250 ]    
}

import std = "BasicLibrary.txt"

units {
    mV = milli volt
    ms = milli second
    uA_per_cm2 = micro ampere . centi metre^-2 "{/Symbol m}A/cm^2" # Desired units of currents
    uF_per_cm2 = micro farad . centi metre^-2
    microamps = micro ampere
    A_per_F = ampere . farad^-1
    uM = micro mole . litre^-1 "{/Symbol m}M"
}

model interface {
    input oxmeta:membrane_voltage units mV
    input oxmeta:extracellular_calcium_concentration units uM
    input oxmeta:cytosolic_calcium_concentration units uM
    input oxmeta:extracellular_potassium_concentration units uM
    input oxmeta:cytosolic_potassium_concentration units uM
    
    output oxmeta:membrane_L_type_calcium_current units uA_per_cm2
    output oxmeta:membrane_voltage units mV
    output oxmeta:time units ms
    
    var chaste_membrane_capacitance units uF_per_cm2 = 1 # For units conversion rules
    
    # Declare some variables as optional: if they do not appear in the model, any clamps or equations below involving
    # them will be ignored, rather than causing the protocol to fail.  A warning will be emitted if optional variables
    # are not found, however.
    # Note that this 'optional-ness' only applies to uses within this section of the protocol - if a simulation or
    # post-processing tries to access an optional variable that doesn't exist, this is still an error.
    optional oxmeta:extracellular_calcium_concentration
    optional oxmeta:cytosolic_calcium_concentration
    optional oxmeta:extracellular_potassium_concentration
    optional oxmeta:cytosolic_potassium_concentration
    
    # Clamp intra/extracellular calcium to whatever value it has in the model
    # This is a convenience shorthand for 'define var = var'
    clamp oxmeta:extracellular_calcium_concentration
    clamp oxmeta:cytosolic_calcium_concentration
    clamp oxmeta:extracellular_potassium_concentration
    clamp oxmeta:cytosolic_potassium_concentration
    
    # Replace the ODE for voltage by a fixed value (the actual value used will be set when running)
    # We could also have used the form 'clamp oxmeta:membrane_voltage to 0 :: mV'
    define oxmeta:membrane_voltage = 0 :: mV
    
    convert A_per_F to uA_per_cm2 by lambda rhs: rhs * chaste_membrane_capacitance
    convert uA_per_cm2 to A_per_F by lambda rhs: rhs / chaste_membrane_capacitance
    convert microamps to uA_per_cm2 by lambda rhs: (rhs / oxmeta:membrane_capacitance) * chaste_membrane_capacitance
    convert uA_per_cm2 to microamps by lambda rhs: (rhs * oxmeta:membrane_capacitance) / chaste_membrane_capacitance
}

tasks {
    # Do a pre-run to get the model to steady-state for the holding potential
    simulation timecourse {
        range time units ms vector [0, steady_state_time]
        modifiers {
            at start set oxmeta:membrane_voltage = holding_potential
            at end save as holding_state
        }
    }
    
    # Now do the IV curve generation
    simulation sim = nested {
        range step_voltage units mV vector test_potentials
        modifiers {
            # Reset the model to holding potential
            at each loop reset to holding_state
            at each loop set oxmeta:membrane_voltage = holding_potential
        }
        nests simulation timecourse {
            range time units ms uniform -10:0.01:500
            modifiers {
                at each loop set oxmeta:membrane_voltage = \
                    if MathML:abs(time - 0) < 1e-6 then step_voltage else oxmeta:membrane_voltage
            }
        }        
    }
}

post-processing {
    # Test that expected model outputs exist
    assert sim:time.IS_ARRAY
    assert sim:membrane_voltage.IS_ARRAY
    assert sim:membrane_L_type_calcium_current.IS_ARRAY
    
    # Only examine the "tail currents" after t=0
    first_index = find(map(lambda t: t > 0, sim:time[0]))[0]
    membrane_L_type_calcium_tail_current = sim:membrane_L_type_calcium_current[1$first_index[0]:]
    
    # Get the minimum tail current (this has the largest magnitude) as a 1d array
    min_LCC = std:RemoveDim(std:Min(membrane_L_type_calcium_tail_current, default), 1)
    
    largest_current = std:RemoveDim(std:Min(min_LCC, default), 1)
    normalised_peak_currents = map(lambda x: -x/largest_current[0], min_LCC)
}

outputs {
    membrane_L_type_calcium_current = sim:membrane_L_type_calcium_current "L-type calcium current"
    membrane_voltage = sim:membrane_voltage "Transmembrane potential"

    membrane_L_type_calcium_tail_current units uA_per_cm2 "I_{CaL} after test potential applied"
    min_LCC units uA_per_cm2 "Minimum I_{CaL} current"
    normalised_peak_currents units dimensionless "Normalised Peak I_{CaL} current"
    test_potentials units mV "Test potential"
}

plots {
    plot "normalised IV curve" using linespoints { normalised_peak_currents against test_potentials }
    plot "IV curve" using linespoints { min_LCC against test_potentials }
}
