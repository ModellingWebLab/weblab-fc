# This protocol defines a library of post-processing operations useful primarily for cardiac electrophysiology,
# specially to compute action potential properties.  The content of the protocol thus occurs within the library
# block below.  We do however make use of many of the BasicLibrary functions, so import that protocol too.
#
# Note that we use a named import with a lengthy prefix here to avoid potential conflicts if this protocol
# and the BasicLibrary are imported directly into the same protocol.  This would especially be the case if
# both were imported without prefix, but due to an implementation quirk it can also cause problems when
# using prefixed imports if the prefixes happen to clash.

import fromBasicLib = "BasicLibrary.txt"

library
{

# Compute action potential durations along time series.
# Returns an array of APD values, whose extent along the last dimension is the minimum number of APs found in any of the time series.
# The function arguments are passed to ApStartAndEnd; see its documentation for details.
def Apd(V, t, percent=default, dim_=default, dvdtThreshold=default, windowSize=default) {
    t_ap_starts, t_ap_ends = ApStartAndEnd(V, t, percent, dim_, dvdtThreshold, windowSize)
    return map(@2:-, t_ap_ends, t_ap_starts)
}


# Compute action potential durations and diastolic intervals along time series.
# Returns a tuple (apds, dis).
# The function arguments are passed to ApStartAndEnd; see its documentation for details.
def ApdAndDi(V, t, percent=default, dim_=default, dvdtThreshold=default, windowSize=default) {
    t_ap_starts, t_ap_ends = ApStartAndEnd(V, t, percent, dim_, dvdtThreshold, windowSize)
    num_dims = V.NUM_DIMS
    assert t_ap_starts.SHAPE[num_dims - 1] >= 2
    apds = map(@2:-, t_ap_ends, t_ap_starts)
    dis = map(@2:-, fromBasicLib:Diff(t_ap_starts), apds[num_dims-1$:-1])
    return (apds, dis)
}


# Utility function doing the bulk of the calculation for Apd and ApdAndDi.
# Determines the start and end times for each action potential, returning a tuple (start_times, end_times).
# These two arrays will have the same number of dimensions as the voltage input (V); the difference is that the last dimension will vary
# over AP number rather than over time, and so will have length equal to the number of complete action potentials found.  The calculation
# only succeeds if each time series contains the same number of action potentials, and all are complete.
#
# Function arguments:
#   V - array of transmembrane potential data.  It may have one or more dimensions, representing one or more separate time series which
#       will be analysed simultaneously.  A V array of shape (d_1, d_2, ..., d_n, T) represents N = d_1 * d_2 * ... * d_n time series
#       each with T data points.
#   t - array of time data, matching V in shape.
#   percent - the percentage of repolarization to calculate for; defaults to 90%.
#   dim_ - indicates which dimension of the V and t arrays varies with time.  Defaults to the last dimension, and in fact the function
#          only works at present if this is the case (this invariant is checked with an assertion).
#   dvdtThreshold - threshold velocity for recognising an upstroke.  The rate of change in V must exceed this in order to be considered
#                   a potential upstroke.  The default value is usually appropriate when V is in mV and t is in ms.
#   windowSize - how many data points to consider when looking for an upstroke.  In order to ensure we don't try to analyse the same AP
#                twice, we only retain one location where dVdt exceeds the threshold within a window containing this many values.  Note
#                that it gives the number of data points, not measured in time units, so if the time resolution is very fine this
#                parameter may need to be increased from its default value.
def ApStartAndEnd(V, t, percent=90, dim_=default, dvdtThreshold=10.0, windowSize=50) {
    dim = fromBasicLib:DefaultDim(V, dim_)
    assert dim == V.NUM_DIMS-1  # Otherwise the extended arrays below break. TODO: fix this!
    assert fromBasicLib:ShapeEq(V, t)
    input_shape = V.SHAPE
    num_dims = V.NUM_DIMS
    assert percent.IS_SIMPLE_VALUE
    assert percent <= 100 && percent >= 0
    assert dvdtThreshold.IS_SIMPLE_VALUE
    assert windowSize.IS_SIMPLE_VALUE

    # Find the maximum upstroke velocity location, checking that the velocity crosses a threshold
    dVdt = fromBasicLib:Grad(t, V, dim)
    assert fromBasicLib:MultiFold(@2:MathML:min, dVdt) < dvdtThreshold && fromBasicLib:MultiFold(@2:MathML:max, dVdt) > dvdtThreshold
    max_upstroke_idxs = find(map(lambda slope, max_slope: slope == max_slope && slope > dvdtThreshold,
                                 dVdt, fromBasicLib:Localise(fromBasicLib:Max, dVdt, windowSize, dim)))

    # If one trace has fewer APs, we need to extend it.  To do so, we need to fake extra APs for this trace.
    # We do so by 'copying' the first AP of the first trace; it should generally work OK.
    fake_upstroke_time = (t{max_upstroke_idxs, dim, shrink:1})[*$0]
    times_nonextended = t{max_upstroke_idxs, dim, pad:1=fake_upstroke_time}

    # Get the max upstroke times as an extended array 'N'xAxT, where N is #runs, A is max #APs, T is #time steps.
    # But N may represent multiple dimensions, if num_dims > 2, or none if num_dims==1.
    extended_shape = [ if i == num_dims then input_shape[i-1] else
                       if i == num_dims-1 then times_nonextended.SHAPE[num_dims-1] else input_shape[i]
                       for i in 0:num_dims+1 ]
    max_upstroke_times = fromBasicLib:Stretch(fromBasicLib:AddDim(times_nonextended, num_dims), extended_shape, num_dims)

    # Find the peaks of these APs: V == local_Vmax && t > t_up
    local_Vmax = fromBasicLib:Stretch(fromBasicLib:AddDim(fromBasicLib:Localise(fromBasicLib:Max, V, 1, dim), num_dims-1), extended_shape, num_dims-1)
    extended_V = fromBasicLib:Stretch(fromBasicLib:AddDim(V, num_dims-1), extended_shape, num_dims-1)
    extended_time = fromBasicLib:Stretch(fromBasicLib:AddDim(t, num_dims-1), extended_shape, num_dims-1)
    peak_idxs = find(map(lambda V, Vmax, t, t_up: V == Vmax && t > t_up,
                         extended_V, local_Vmax, extended_time, max_upstroke_times))

    # Take the first such t & V
    t_peak = (extended_time{peak_idxs, num_dims, shrink:1})[num_dims$0:1]
    V_peak = (extended_V{peak_idxs, num_dims, shrink:1})[num_dims$0:1]

    # Assume resting potential is global minimum, and calculate relaxation potential
    V_rest = fromBasicLib:Min(extended_V, num_dims)
    V_relax = map(lambda V_peak, V_rest: V_rest + (1-percent/100)*(V_peak-V_rest), V_peak, V_rest)

    # Extend the t & V arrays by one extra value in each direction, to ensure that interpolation will succeed!
    ext_i = lambda i: if i == -1 then 0 else if i == input_shape[dim] then input_shape[dim]-1 else i
    ext_time = [ extended_time[num_dims$ext_i(i)] for num_dims$i in -1:input_shape[dim]+1 ]
    ext_V = [ if i == -1 || i == input_shape[dim] then V_relax[num_dims$0]
                                                  else extended_V[num_dims$i] for num_dims$i in -1:input_shape[dim]+1 ]

    # Find (with interpolation) the first time before/after each peak where the relaxation potential is crossed
    t_ap_starts = fromBasicLib:RemoveDim(fromBasicLib:Interp(ext_time, ext_V, V_relax, t_peak, 0, num_dims), num_dims)
    t_ap_ends = fromBasicLib:RemoveDim(fromBasicLib:Interp(ext_time, ext_V, V_relax, t_peak, 1, num_dims), num_dims)
    return t_ap_starts, t_ap_ends
}


}
